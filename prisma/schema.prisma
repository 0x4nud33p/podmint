generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(uuid())
  name           String
  email          String     @unique
  image          String?
  emailVerified  Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  sessions       Session[]
  accounts       Account[]
  recordings     RecordingSession[]
  participants   Participant[]

  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String   @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model RecordingSession {
  id           String       @id @default(uuid())
  title        String
  description  String?
  createdAt    DateTime     @default(now())
  scheduledAt  DateTime?
  status       String       @default("scheduled") 
  hostId       String
  host         User         @relation(fields: [hostId], references: [id], onDelete: Cascade)
  participants Participant[]
  tracks       MediaTrack[]

  @@map("recording_session")
}

model Participant {
  id         String       @id @default(uuid())
  name       String
  isGuest    Boolean      @default(false)
  userId     String?
  user       User?        @relation(fields: [userId], references: [id])
  sessionId  String
  session    RecordingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  tracks     MediaTrack[]

  @@map("participant")
}

model MediaTrack {
  id             String     @id @default(uuid())
  type           String   // audio, video, screenshare
  url            String
  duration       Float
  recordedAt     DateTime   @default(now())
  participantId  String
  sessionId      String
  participant    Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  session        RecordingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("media_track")
}
